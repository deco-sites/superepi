import { useId } from "$store/sdk/useId.ts";
import type { JSX } from "preact";
import SliderJS, { type Props as SliderJSProps } from "./PDPSliderJS.tsx";

function AutoGeneratedDots(props: JSX.IntrinsicElements["ul"]) {
  return <ul data-dots {...props} />;
}

function DotTemplate(props: JSX.IntrinsicElements["button"]) {
  return (
    <li data-dot-template class="flex group shrink-0">
      <button type="button" {...props} />
    </li>
  );
}

function Dot({
  index,
  ...props
}: JSX.IntrinsicElements["button"] & {
  index: number;
}) {
  return (
    <li data-dot={index} class="flex group shrink-0">
      <button type="button" {...props} />
    </li>
  );
}

function Root({
  id: _id,
  infinite,
  interval,
  orientation,
  center,
  ...props
}: JSX.IntrinsicElements["div"] & Omit<SliderJSProps, "rootId">) {
  const id = (_id as string) ?? useId();

  return (
    <>
      <div id={id} data-root {...props} />
      <SliderJS
        rootId={id}
        infinite={infinite}
        interval={interval}
        orientation={orientation}
        center={center}
      />
    </>
  );
}

function Carousel(props: JSX.IntrinsicElements["ul"]) {
  return <ul data-carousel {...props} />;
}

function Item(
  { index, ...props }: JSX.IntrinsicElements["li"] & { index: number },
) {
  return <li data-item={index} {...props} />;
}

function NextButton(props: JSX.IntrinsicElements["button"]) {
  return (
    <button type="button" data-next aria-label="Próxima página" {...props} />
  );
}

function PrevButton(props: JSX.IntrinsicElements["button"]) {
  return (
    <button type="button" data-prev aria-label="Página anterior" {...props} />
  );
}

function DotsGroup(props: JSX.IntrinsicElements["ul"]) {
  return <ul data-dots-group {...props} />;
}

export default {
  AutoGeneratedDots,
  Carousel,
  Dot,
  DotTemplate,
  Item,
  NextButton,
  PrevButton,
  Root,
  DotsGroup,
};
